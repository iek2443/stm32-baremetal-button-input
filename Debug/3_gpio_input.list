
3_gpio_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000428  08000430  00001430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000428  08000428  00001430  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000428  08000428  00001430  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000428  08000430  00001430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000428  08000428  00001428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800042c  0800042c  0000142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001430  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000044b  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000014d  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000019f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001006  00000000  00000000  00001a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000523  00000000  00000000  00002a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000040aa  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000704e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000084  00000000  00000000  00007094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00007118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000410 	.word	0x08000410

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000410 	.word	0x08000410

080001c8 <main>:

// ==============================
// Main Function
// ==============================

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
	// 1. Enable GPIOD clock (bit 3 of AHB1ENR)
	RCC->AHB1ENR |= GPIODEN;
 80001ce:	4b58      	ldr	r3, [pc, #352]	@ (8000330 <main+0x168>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d2:	4a57      	ldr	r2, [pc, #348]	@ (8000330 <main+0x168>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= GPIOAEN;
 80001da:	4b55      	ldr	r3, [pc, #340]	@ (8000330 <main+0x168>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a54      	ldr	r2, [pc, #336]	@ (8000330 <main+0x168>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30
	// 2. Configure GPIOD pins 12â€“15 as general-purpose output (MODER = 01 for each)
	GPIOD->MODER |= (1U << 24);  // Pin 12
 80001e6:	4b53      	ldr	r3, [pc, #332]	@ (8000334 <main+0x16c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a52      	ldr	r2, [pc, #328]	@ (8000334 <main+0x16c>)
 80001ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U << 26);  // Pin 13
 80001f2:	4b50      	ldr	r3, [pc, #320]	@ (8000334 <main+0x16c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a4f      	ldr	r2, [pc, #316]	@ (8000334 <main+0x16c>)
 80001f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U << 28);  // Pin 14
 80001fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000334 <main+0x16c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a4c      	ldr	r2, [pc, #304]	@ (8000334 <main+0x16c>)
 8000204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000208:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U << 30);  // Pin 15
 800020a:	4b4a      	ldr	r3, [pc, #296]	@ (8000334 <main+0x16c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a49      	ldr	r2, [pc, #292]	@ (8000334 <main+0x16c>)
 8000210:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000214:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0x3 << 0);
 8000216:	4b48      	ldr	r3, [pc, #288]	@ (8000338 <main+0x170>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a47      	ldr	r2, [pc, #284]	@ (8000338 <main+0x170>)
 800021c:	f023 0303 	bic.w	r3, r3, #3
 8000220:	6013      	str	r3, [r2, #0]

	// 3. Main loop: turn LEDs on one by one, then off one by one
	while (1) {

		if(GPIOA->IDR & GPIO_PIN_0){
 8000222:	4b45      	ldr	r3, [pc, #276]	@ (8000338 <main+0x170>)
 8000224:	691b      	ldr	r3, [r3, #16]
 8000226:	f003 0301 	and.w	r3, r3, #1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0f9      	beq.n	8000222 <main+0x5a>
		// Turn ON each LED with a delay
		GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);  // Green
 800022e:	2201      	movs	r2, #1
 8000230:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000234:	483f      	ldr	r0, [pc, #252]	@ (8000334 <main+0x16c>)
 8000236:	f000 f883 	bl	8000340 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]
 800023e:	e002      	b.n	8000246 <main+0x7e>
 8000240:	69fb      	ldr	r3, [r7, #28]
 8000242:	3301      	adds	r3, #1
 8000244:	61fb      	str	r3, [r7, #28]
 8000246:	69fb      	ldr	r3, [r7, #28]
 8000248:	4a3c      	ldr	r2, [pc, #240]	@ (800033c <main+0x174>)
 800024a:	4293      	cmp	r3, r2
 800024c:	ddf8      	ble.n	8000240 <main+0x78>

		GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);  // Orange
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000254:	4837      	ldr	r0, [pc, #220]	@ (8000334 <main+0x16c>)
 8000256:	f000 f873 	bl	8000340 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 800025a:	2300      	movs	r3, #0
 800025c:	61bb      	str	r3, [r7, #24]
 800025e:	e002      	b.n	8000266 <main+0x9e>
 8000260:	69bb      	ldr	r3, [r7, #24]
 8000262:	3301      	adds	r3, #1
 8000264:	61bb      	str	r3, [r7, #24]
 8000266:	69bb      	ldr	r3, [r7, #24]
 8000268:	4a34      	ldr	r2, [pc, #208]	@ (800033c <main+0x174>)
 800026a:	4293      	cmp	r3, r2
 800026c:	ddf8      	ble.n	8000260 <main+0x98>

		GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);  // Red
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000274:	482f      	ldr	r0, [pc, #188]	@ (8000334 <main+0x16c>)
 8000276:	f000 f863 	bl	8000340 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	e002      	b.n	8000286 <main+0xbe>
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	3301      	adds	r3, #1
 8000284:	617b      	str	r3, [r7, #20]
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	4a2c      	ldr	r2, [pc, #176]	@ (800033c <main+0x174>)
 800028a:	4293      	cmp	r3, r2
 800028c:	ddf8      	ble.n	8000280 <main+0xb8>

		GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);  // Blue
 800028e:	2201      	movs	r2, #1
 8000290:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000294:	4827      	ldr	r0, [pc, #156]	@ (8000334 <main+0x16c>)
 8000296:	f000 f853 	bl	8000340 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	e002      	b.n	80002a6 <main+0xde>
 80002a0:	693b      	ldr	r3, [r7, #16]
 80002a2:	3301      	adds	r3, #1
 80002a4:	613b      	str	r3, [r7, #16]
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	4a24      	ldr	r2, [pc, #144]	@ (800033c <main+0x174>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	ddf8      	ble.n	80002a0 <main+0xd8>

		// Turn OFF each LED with a delay
		GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002b4:	481f      	ldr	r0, [pc, #124]	@ (8000334 <main+0x16c>)
 80002b6:	f000 f843 	bl	8000340 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e002      	b.n	80002c6 <main+0xfe>
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	4a1c      	ldr	r2, [pc, #112]	@ (800033c <main+0x174>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	ddf8      	ble.n	80002c0 <main+0xf8>

		GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002d4:	4817      	ldr	r0, [pc, #92]	@ (8000334 <main+0x16c>)
 80002d6:	f000 f833 	bl	8000340 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 80002da:	2300      	movs	r3, #0
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	e002      	b.n	80002e6 <main+0x11e>
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	3301      	adds	r3, #1
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	4a14      	ldr	r2, [pc, #80]	@ (800033c <main+0x174>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	ddf8      	ble.n	80002e0 <main+0x118>

		GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002f4:	480f      	ldr	r0, [pc, #60]	@ (8000334 <main+0x16c>)
 80002f6:	f000 f823 	bl	8000340 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	e002      	b.n	8000306 <main+0x13e>
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	3301      	adds	r3, #1
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a0c      	ldr	r2, [pc, #48]	@ (800033c <main+0x174>)
 800030a:	4293      	cmp	r3, r2
 800030c:	ddf8      	ble.n	8000300 <main+0x138>

		GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000314:	4807      	ldr	r0, [pc, #28]	@ (8000334 <main+0x16c>)
 8000316:	f000 f813 	bl	8000340 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 800031a:	2300      	movs	r3, #0
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	e002      	b.n	8000326 <main+0x15e>
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	3301      	adds	r3, #1
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <main+0x174>)
 800032a:	4293      	cmp	r3, r2
 800032c:	ddf8      	ble.n	8000320 <main+0x158>
		if(GPIOA->IDR & GPIO_PIN_0){
 800032e:	e778      	b.n	8000222 <main+0x5a>
 8000330:	40023800 	.word	0x40023800
 8000334:	40020c00 	.word	0x40020c00
 8000338:	40020000 	.word	0x40020000
 800033c:	00030d3f 	.word	0x00030d3f

08000340 <GPIO_WritePin>:
 *
 * @param  GPIOx      Pointer to the target GPIO port (e.g., GPIOD)
 * @param  GPIO_Pin   Pin mask (e.g., GPIO_PIN_13)
 * @param  status     SET or RESET
 */
void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, pin_status status) {
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	807b      	strh	r3, [r7, #2]
 800034c:	4613      	mov	r3, r2
 800034e:	707b      	strb	r3, [r7, #1]
	if (status == SET) {
 8000350:	787b      	ldrb	r3, [r7, #1]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d103      	bne.n	800035e <GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;            // Lower 16 bits: set pin
 8000356:	887a      	ldrh	r2, [r7, #2]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (GPIO_Pin << 16);    // Upper 16 bits: reset pin
	}
}
 800035c:	e003      	b.n	8000366 <GPIO_WritePin+0x26>
		GPIOx->BSRR = (GPIO_Pin << 16);    // Upper 16 bits: reset pin
 800035e:	887b      	ldrh	r3, [r7, #2]
 8000360:	041a      	lsls	r2, r3, #16
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	619a      	str	r2, [r3, #24]
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
	...

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	@ (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000378:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	@ (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	@ (80003b8 <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	@ (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	@ (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 f811 	bl	80003c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff ff0f 	bl	80001c8 <main>

080003aa <LoopForever>:

LoopForever:
  b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b8:	08000430 	.word	0x08000430
  ldr r2, =_sbss
 80003bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c0:	2000001c 	.word	0x2000001c

080003c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC_IRQHandler>
	...

080003c8 <__libc_init_array>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000400 <__libc_init_array+0x38>)
 80003cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000404 <__libc_init_array+0x3c>)
 80003ce:	1b64      	subs	r4, r4, r5
 80003d0:	10a4      	asrs	r4, r4, #2
 80003d2:	2600      	movs	r6, #0
 80003d4:	42a6      	cmp	r6, r4
 80003d6:	d109      	bne.n	80003ec <__libc_init_array+0x24>
 80003d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000408 <__libc_init_array+0x40>)
 80003da:	4c0c      	ldr	r4, [pc, #48]	@ (800040c <__libc_init_array+0x44>)
 80003dc:	f000 f818 	bl	8000410 <_init>
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	10a4      	asrs	r4, r4, #2
 80003e4:	2600      	movs	r6, #0
 80003e6:	42a6      	cmp	r6, r4
 80003e8:	d105      	bne.n	80003f6 <__libc_init_array+0x2e>
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f0:	4798      	blx	r3
 80003f2:	3601      	adds	r6, #1
 80003f4:	e7ee      	b.n	80003d4 <__libc_init_array+0xc>
 80003f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fa:	4798      	blx	r3
 80003fc:	3601      	adds	r6, #1
 80003fe:	e7f2      	b.n	80003e6 <__libc_init_array+0x1e>
 8000400:	08000428 	.word	0x08000428
 8000404:	08000428 	.word	0x08000428
 8000408:	08000428 	.word	0x08000428
 800040c:	0800042c 	.word	0x0800042c

08000410 <_init>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

0800041c <_fini>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr
