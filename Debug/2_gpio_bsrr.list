
2_gpio_bsrr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000404  08000404  00001404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001408  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000044b  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000014d  00000000  00000000  00001883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000019d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000fe8  00000000  00000000  00001a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000050e  00000000  00000000  00002a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003fd1  00000000  00000000  00002f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006f1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000084  00000000  00000000  00006f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00006fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003e8 	.word	0x080003e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003e8 	.word	0x080003e8

080001c8 <main>:

// ==============================
// Main Function
// ==============================

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
	// 1. Enable GPIOD clock (bit 3 of AHB1ENR)
	RCC->AHB1ENR |= GPIODEN;
 80001ce:	4b4f      	ldr	r3, [pc, #316]	@ (800030c <main+0x144>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d2:	4a4e      	ldr	r2, [pc, #312]	@ (800030c <main+0x144>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. Configure GPIOD pins 12â€“15 as general-purpose output (MODER = 01 for each)
	GPIOD->MODER |= (1U << 24);  // Pin 12
 80001da:	4b4d      	ldr	r3, [pc, #308]	@ (8000310 <main+0x148>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a4c      	ldr	r2, [pc, #304]	@ (8000310 <main+0x148>)
 80001e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001e4:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U << 26);  // Pin 13
 80001e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000310 <main+0x148>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a49      	ldr	r2, [pc, #292]	@ (8000310 <main+0x148>)
 80001ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U << 28);  // Pin 14
 80001f2:	4b47      	ldr	r3, [pc, #284]	@ (8000310 <main+0x148>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a46      	ldr	r2, [pc, #280]	@ (8000310 <main+0x148>)
 80001f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U << 30);  // Pin 15
 80001fe:	4b44      	ldr	r3, [pc, #272]	@ (8000310 <main+0x148>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a43      	ldr	r2, [pc, #268]	@ (8000310 <main+0x148>)
 8000204:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000208:	6013      	str	r3, [r2, #0]

	// 3. Main loop: turn LEDs on one by one, then off one by one
	while (1) {
		// Turn ON each LED with a delay
		GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);  // Green
 800020a:	2201      	movs	r2, #1
 800020c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000210:	483f      	ldr	r0, [pc, #252]	@ (8000310 <main+0x148>)
 8000212:	f000 f881 	bl	8000318 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 8000216:	2300      	movs	r3, #0
 8000218:	61fb      	str	r3, [r7, #28]
 800021a:	e002      	b.n	8000222 <main+0x5a>
 800021c:	69fb      	ldr	r3, [r7, #28]
 800021e:	3301      	adds	r3, #1
 8000220:	61fb      	str	r3, [r7, #28]
 8000222:	69fb      	ldr	r3, [r7, #28]
 8000224:	4a3b      	ldr	r2, [pc, #236]	@ (8000314 <main+0x14c>)
 8000226:	4293      	cmp	r3, r2
 8000228:	ddf8      	ble.n	800021c <main+0x54>

		GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);  // Orange
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000230:	4837      	ldr	r0, [pc, #220]	@ (8000310 <main+0x148>)
 8000232:	f000 f871 	bl	8000318 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 8000236:	2300      	movs	r3, #0
 8000238:	61bb      	str	r3, [r7, #24]
 800023a:	e002      	b.n	8000242 <main+0x7a>
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	3301      	adds	r3, #1
 8000240:	61bb      	str	r3, [r7, #24]
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	4a33      	ldr	r2, [pc, #204]	@ (8000314 <main+0x14c>)
 8000246:	4293      	cmp	r3, r2
 8000248:	ddf8      	ble.n	800023c <main+0x74>

		GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);  // Red
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000250:	482f      	ldr	r0, [pc, #188]	@ (8000310 <main+0x148>)
 8000252:	f000 f861 	bl	8000318 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
 800025a:	e002      	b.n	8000262 <main+0x9a>
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	3301      	adds	r3, #1
 8000260:	617b      	str	r3, [r7, #20]
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	4a2b      	ldr	r2, [pc, #172]	@ (8000314 <main+0x14c>)
 8000266:	4293      	cmp	r3, r2
 8000268:	ddf8      	ble.n	800025c <main+0x94>

		GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);  // Blue
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000270:	4827      	ldr	r0, [pc, #156]	@ (8000310 <main+0x148>)
 8000272:	f000 f851 	bl	8000318 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
 800027a:	e002      	b.n	8000282 <main+0xba>
 800027c:	693b      	ldr	r3, [r7, #16]
 800027e:	3301      	adds	r3, #1
 8000280:	613b      	str	r3, [r7, #16]
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	4a23      	ldr	r2, [pc, #140]	@ (8000314 <main+0x14c>)
 8000286:	4293      	cmp	r3, r2
 8000288:	ddf8      	ble.n	800027c <main+0xb4>

		// Turn OFF each LED with a delay
		GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000290:	481f      	ldr	r0, [pc, #124]	@ (8000310 <main+0x148>)
 8000292:	f000 f841 	bl	8000318 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	e002      	b.n	80002a2 <main+0xda>
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	3301      	adds	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000314 <main+0x14c>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	ddf8      	ble.n	800029c <main+0xd4>

		GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002b0:	4817      	ldr	r0, [pc, #92]	@ (8000310 <main+0x148>)
 80002b2:	f000 f831 	bl	8000318 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	e002      	b.n	80002c2 <main+0xfa>
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	3301      	adds	r3, #1
 80002c0:	60bb      	str	r3, [r7, #8]
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	4a13      	ldr	r2, [pc, #76]	@ (8000314 <main+0x14c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	ddf8      	ble.n	80002bc <main+0xf4>

		GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002d0:	480f      	ldr	r0, [pc, #60]	@ (8000310 <main+0x148>)
 80002d2:	f000 f821 	bl	8000318 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 80002d6:	2300      	movs	r3, #0
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	e002      	b.n	80002e2 <main+0x11a>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3301      	adds	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <main+0x14c>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	ddf8      	ble.n	80002dc <main+0x114>

		GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002f0:	4807      	ldr	r0, [pc, #28]	@ (8000310 <main+0x148>)
 80002f2:	f000 f811 	bl	8000318 <GPIO_WritePin>
		for (volatile int i = 0; i < 200000; i++);
 80002f6:	2300      	movs	r3, #0
 80002f8:	603b      	str	r3, [r7, #0]
 80002fa:	e002      	b.n	8000302 <main+0x13a>
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	3301      	adds	r3, #1
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	4a03      	ldr	r2, [pc, #12]	@ (8000314 <main+0x14c>)
 8000306:	4293      	cmp	r3, r2
 8000308:	ddf8      	ble.n	80002fc <main+0x134>
		GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);  // Green
 800030a:	e77e      	b.n	800020a <main+0x42>
 800030c:	40023800 	.word	0x40023800
 8000310:	40020c00 	.word	0x40020c00
 8000314:	00030d3f 	.word	0x00030d3f

08000318 <GPIO_WritePin>:
 *
 * @param  GPIOx      Pointer to the target GPIO port (e.g., GPIOD)
 * @param  GPIO_Pin   Pin mask (e.g., GPIO_PIN_13)
 * @param  status     SET or RESET
 */
void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, pin_status status) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	807b      	strh	r3, [r7, #2]
 8000324:	4613      	mov	r3, r2
 8000326:	707b      	strb	r3, [r7, #1]
	if (status == SET) {
 8000328:	787b      	ldrb	r3, [r7, #1]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d103      	bne.n	8000336 <GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;            // Lower 16 bits: set pin
 800032e:	887a      	ldrh	r2, [r7, #2]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (GPIO_Pin << 16);    // Upper 16 bits: reset pin
	}
}
 8000334:	e003      	b.n	800033e <GPIO_WritePin+0x26>
		GPIOx->BSRR = (GPIO_Pin << 16);    // Upper 16 bits: reset pin
 8000336:	887b      	ldrh	r3, [r7, #2]
 8000338:	041a      	lsls	r2, r3, #16
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	619a      	str	r2, [r3, #24]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	@ (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	@ (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 f811 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff23 	bl	80001c8 <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	2000001c 	.word	0x2000001c

0800039c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	@ (80003d8 <__libc_init_array+0x38>)
 80003a4:	4c0d      	ldr	r4, [pc, #52]	@ (80003dc <__libc_init_array+0x3c>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	2600      	movs	r6, #0
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	@ (80003e0 <__libc_init_array+0x40>)
 80003b2:	4c0c      	ldr	r4, [pc, #48]	@ (80003e4 <__libc_init_array+0x44>)
 80003b4:	f000 f818 	bl	80003e8 <_init>
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	2600      	movs	r6, #0
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000400 	.word	0x08000400
 80003e4:	08000404 	.word	0x08000404

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
